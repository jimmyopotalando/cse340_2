/* ***********************************
 *  Account Validation
 *  Created in Unit 4
 *  Modified in Unit 5 
 *********************************** */

const utilities = require(".")
const accountModel = require("../models/account-model")
const { body, validationResult } = require("express-validator")

const validate = {}

/* **********************************
 *  Registration Data Validation Rules
 ********************************** */
validate.registationRules = () => [
  body("account_firstname")
    .trim()
    .isString()
    .isLength({ min: 1 })
    .withMessage("Please provide a first name."),
  
  body("account_lastname")
    .trim()
    .isString()
    .isLength({ min: 1 })
    .withMessage("Please provide a last name."),
  
  body("account_email")
    .trim()
    .isEmail()
    .normalizeEmail()
    .withMessage("A valid email is required.")
    .custom(async (account_email) => {
      const emailExists = await accountModel.checkExistingEmail(account_email)
      if (emailExists) {
        throw new Error("Email exists. Please login or use a different email.")
      }
    }),

  body("account_password")
    .trim()
    .isStrongPassword({
      minLength: 12,
      minLowercase: 1,
      minUppercase: 1,
      minNumbers: 1,
      minSymbols: 1,
    })
    .withMessage("Password does not meet requirements.")
]

/* **********************************
 *  Login Data Validation Rules
 ********************************** */
validate.loginRules = () => [
  body("account_email")
    .trim()
    .isEmail()
    .normalizeEmail()
    .withMessage("A valid email is required."),
  
  body("account_password")
    .trim()
    .isStrongPassword({
      minLength: 12,
      minLowercase: 1,
      minUppercase: 1,
      minNumbers: 1,
      minSymbols: 1,
    })
    .withMessage("Password does not meet requirements.")
]

/* **********************************
 *  Account Update Validation Rules
 ********************************** */
validate.accountUpdateRules = () => [
  body("firstname")
    .notEmpty()
    .withMessage("First name is required."),
  
  body("lastname")
    .notEmpty()
    .withMessage("Last name is required."),
  
  body("email")
    .isEmail()
    .withMessage("Valid email required.")
    .custom(async (email, { req }) => {
      const existing = await accountModel.getAccountByEmail(email)
      if (existing && existing.account_id != req.body.account_id) {
        throw new Error("Email already in use.")
      }
    })
]

/* **********************************
 *  Password Update Validation Rules
 ********************************** */
validate.passwordRules = () => [
  body("password")
    .isStrongPassword()
    .withMessage(
      "Password must be at least 8 characters, include uppercase, lowercase, a number, and a special character."
    )
]

/* **********************************
 *  Check Registration Data
 ********************************** */
validate.checkRegData = async (req, res, next) => {
  const { account_firstname, account_lastname, account_email } = req.body
  const errors = validationResult(req)
  if (!errors.isEmpty()) {
    let nav = await utilities.getNav()
    res.render("account/register", {
      errors,
      title: "Registration",
      nav,
      account_firstname,
      account_lastname,
      account_email,
    })
    return
  }
  next()
}

/* **********************************
 *  Check Login Data
 ********************************** */
validate.checkLoginData = async (req, res, next) => {
  const { account_email } = req.body
  const errors = validationResult(req)
  if (!errors.isEmpty()) {
    let nav = await utilities.getNav()
    res.render("account/login", {
      errors,
      title: "Login",
      nav,
      account_email,
    })
    return
  }
  next()
}

/* **********************************
 *  Check Account Update Data
 ********************************** */
validate.checkAccountUpdateData = (req, res, next) => {
  const errors = validationResult(req)
  if (!errors.isEmpty()) {
    req.flash("errors", errors.array())
    return res.redirect(`/account/update/${req.body.account_id}`)
  }
  next()
}

/* **********************************
 *  Check Password Update Data
 ********************************** */
validate.checkPasswordData = (req, res, next) => {
  const errors = validationResult(req)
  if (!errors.isEmpty()) {
    req.flash("errors", errors.array())
    return res.redirect(`/account/update/${req.body.account_id}`)
  }
  next()
}

module.exports = validate
